---
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";

import BaseLayout from "@layouts/BaseLayout.astro";
import BannerText from "@src/components/BannerText.astro";
import SiteHeader from "@src/components/SiteHeader.astro";
import PaginatedEntries from "@components/PaginatedEntries.astro";
import Aside from "@components/Aside.astro";

import { SITE_DESCRIPTION, SITE_TITLE } from "@src/consts";

export const getStaticPaths = (async ({ paginate }) => {
	const allNotes = await getCollection("notes", ({ data }) => {
		return import.meta.env.PROD ? data.draft !== true : true;
	});
	const allArticles = await getCollection("articles", ({ data }) => {
		return import.meta.env.PROD ? data.draft !== true : true;
	});

	const allEntries = [...allNotes, ...allArticles];
	allEntries.sort(
		(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
	);
	return paginate(allEntries, { pageSize: 20 });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const entries = await Promise.all(
	page.data.map(async (entry) => {
		const { Content } = await render(entry);
		return { ...entry, Content };
	}),
);
---

<BaseLayout
	bodyClass="homepage"
	pageTitle={SITE_TITLE}
	pageDesc={SITE_DESCRIPTION}
	ogType="website"
>
	<BannerText />
	<div class="page">
		<div>
			<SiteHeader />
			<main id="main">
				<h1 class="visually-hidden">
					Notes & Articles
					{
						page.lastPage > 1 && (
							<Fragment>
								- Page {page.currentPage} of {page.lastPage}
							</Fragment>
						)
					}
				</h1>
				<PaginatedEntries page={page} entries={entries} />
			</main>
		</div>
		<Aside>
			<div class="center p-space-m">
				<div class="i-full text-box-trim">
					<a class="inline-block" href="/contact/">Get in touch</a>
				</div>
			</div>
		</Aside>
	</div>
</BaseLayout>
