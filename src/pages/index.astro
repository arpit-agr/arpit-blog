---
import BaseLayout from "@layouts/BaseLayout.astro";
import BannerText from "@src/components/BannerText.astro";
import SiteHeader from "@src/components/SiteHeader.astro";

import { SITE_TITLE } from "@src/consts";
import { getCollection, render } from "astro:content";

const allNotes = await getCollection("notes");
const allArticles = await getCollection("articles");

const allEntries = [...allNotes, ...allArticles];
allEntries.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const entries = await Promise.all(
	allEntries.map(async (entry) => {
		const { Content } = await render(entry);
		return { ...entry, Content };
	}),
);
---

<BaseLayout
	bodyClass="homepage"
	pageTitle={SITE_TITLE}
	pageDesc="The digital garden of Arpit Agrawal, a web designer-developer from India."
	ogType="website"
>
	<BannerText as="h1" />
	<div>
		<SiteHeader />
		<main>
			<ul role="list">
				{
					entries.map((entry) => {
						const basePath =
							entry.collection === "notes" ? "/notes" : "/articles";
						return (
							<li>
								<article class="stack">
									<p>
										<span class="visually-hidden">Posted on</span>
										<time datetime={entry.data.pubDate.toISOString()}>
											{entry.data.pubDate.toLocaleString("en-IN", {
												year: "numeric",
												month: "short",
												day: "numeric",
											})}
										</time>
									</p>
									{entry.collection === "articles" && (
										<h2>
											<a href={`${basePath}/${entry.id}/`}>
												{entry.data.title}
											</a>
										</h2>
									)}
									<div class="content flow">
										<entry.Content />
									</div>
									<footer class="repel">
										<a href={`${basePath}/${entry.id}#comments`}>Reply</a>
										<a href={`${basePath}/${entry.id}/`} rel="bookmark">
											More about this
										</a>
									</footer>
								</article>
							</li>
						);
					})
				}
			</ul>
		</main>
	</div>
</BaseLayout>

<style is:global>
	@layer exceptions {
		.homepage {
			main li {
				position: relative;
				padding: 1lh;

				+ li::before {
					--_angle: 90deg;

					inset-inline: 0;
					inset-block-start: 0;
					block-size: var(--border-thickness);
				}

				article {
					> :where(:first-child, :last-child) {
						font-size: 0.875em;
						color: oklch(from var(--color-text) l c h / 0.625);

						&,
						* {
							text-box: trim-both cap alphabetic;
						}
					}
				}

				footer {
					align-self: stretch;
				}

				.content {
					max-inline-size: 100%;
				}
			}
		}
	}
</style>
